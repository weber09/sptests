/* AlgolParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AlgolParserTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class AlgolParserTokenManager implements AlgolParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140L) != 0L || (active1 & 0x81000L) != 0L)
            return 2;
         if ((active0 & 0x3dff7b9ffe000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 88;
            return 29;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
            return 5;
         if ((active0 & 0x200846000000L) != 0L || (active1 & 0x40L) != 0L)
            return 29;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x37ffedfbfe000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x800120400000L) != 0L || (active1 & 0x20L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0x3fffbdfbfa000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
            return 29;
         }
         if ((active0 & 0x400004000L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0x3f0abc7afa000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 3;
            }
            return 29;
         }
         if ((active0 & 0xf5018100000L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x3f0aa068fa000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
            return 29;
         }
         if ((active0 & 0x801d1200000L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0x3e0a8068b2000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x100200048000L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x3002800812000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 6;
            }
            return 29;
         }
         if ((active0 & 0xe080060a0000L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0x3002000812000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
            return 29;
         }
         if ((active0 & 0x804000000L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x2002000810000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x1000000002000L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x2000010000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x2000000800000L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 10;
            return 29;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 29;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 37:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 40:
         return jjStopAtPos(0, 55);
      case 41:
         return jjStopAtPos(0, 56);
      case 42:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 43:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10080L);
      case 44:
         return jjStopAtPos(0, 61);
      case 45:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20100L);
      case 46:
         return jjStartNfaWithStates_0(0, 62, 5);
      case 47:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x80000L);
      case 58:
         return jjStopAtPos(0, 91);
      case 60:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x8L);
      case 61:
         return jjStopAtPos(0, 66);
      case 62:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 91:
         return jjStopAtPos(0, 59);
      case 92:
         return jjStopAtPos(0, 77);
      case 93:
         return jjStopAtPos(0, 60);
      case 94:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400002000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1040000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000400000L, 0x0L);
      case 101:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x200846000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200b081010000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x28000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x180c0000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x184000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400200100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x120000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000a04000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 57);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 125:
         return jjStopAtPos(0, 58);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 43:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 45:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xff0000L);
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c5001004000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00318b00000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200a080090000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x840028000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1020000040000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200006000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 117:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 29);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(2, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(2, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0xa01006000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 29);
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x42000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20018008000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10001000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200a080010000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000100000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x84000800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000402a0000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 29);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80150010000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x20020000a0000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800200040000L);
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 29);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 29);
         break;
      case 111:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000202000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100006000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x81000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x108800800000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000028000L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000010000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 29);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 29);
         break;
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 29);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000082000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000080000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400800000000L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 29);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 29);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 29);
         break;
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000020000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 29);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 29);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 29);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 29);
         break;
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000010000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800002000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1002000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1002000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 29);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 29);
         break;
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 29);
         break;
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 29);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000010000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 46;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddStates(0, 7); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  else if (curChar == 39)
                     { jjAddStates(11, 12); }
                  else if (curChar == 46)
                     { jjCheckNAdd(5); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 46)
                     { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(13, 15); }
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 10:
                  if (curChar == 39)
                     { jjAddStates(11, 12); }
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if (curChar == 39 && kind > 53)
                     kind = 53;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(16, 12); }
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 19:
                  if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 23:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(16, 19); }
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddStates(0, 7); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(37); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(37, 9); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(41, 9); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(29); }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjAddStates(28, 30); }
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 21:
                  if (curChar == 92)
                     { jjAddStates(31, 33); }
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(34, 35); }
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(36, 37); }
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(38, 39); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(8, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 46 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   31, 32, 33, 38, 39, 42, 43, 9, 20, 21, 23, 11, 13, 5, 6, 9, 
   20, 21, 25, 23, 34, 35, 9, 42, 43, 9, 7, 8, 14, 15, 17, 22, 
   24, 26, 36, 37, 40, 41, 44, 45, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\141\154\147\157\162\151\164\155\157", "\166\141\162", "\151\156\151\143\151\157", 
"\146\151\155\141\154\147\157\162\151\164\155\157", "\151\156\164\145\151\162\157", "\154\157\147\151\143\157", 
"\154\151\164\145\162\141\154", "\162\145\141\154", "\166\145\164\157\162", "\144\145", 
"\166\145\162\144\141\144\145\151\162\157", "\146\141\154\163\157", "\145\163\143\162\145\166\141", 
"\145\163\143\162\145\166\141\154", "\154\145\151\141", "\154\145\151\141\154", "\163\145", 
"\145\156\164\141\157", "\146\151\155\163\145", "\163\145\156\141\157", "\162\145\160\151\164\141", 
"\141\164\145", "\145\156\161\165\141\156\164\157", "\146\141\143\141", 
"\146\151\155\145\156\161\165\141\156\164\157", "\160\141\162\141", "\146\151\155\160\141\162\141", "\156\165\154\154", 
"\166\157\151\144", "\143\141\163\157", "\160\141\162\141\162", "\160\141\144\162\141\157", 
"\145\163\143\157\154\150\141", "\162\145\164\157\162\156\141", "\144\145\143\151\155\141\154", 
"\143\157\156\164\151\156\165\141\162", "\146\151\155\145\163\143\157\154\150\141", null, null, null, null, null, 
"\50", "\51", "\173", "\175", "\133", "\135", "\54", "\56", "\74\55", "\76", "\74", 
"\75", "\74\75", "\76\75", "\157\165", "\145", "\53\53", "\55\55", "\53", "\55", 
"\52", "\57", "\134", "\136", "\45", "\53\74\55", "\55\74\55", "\52\74\55", 
"\57\74\55", "\46\74\55", "\174\74\55", "\136\74\55", "\45\74\55", null, null, null, "\72", 
"\41\75", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AlgolParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public AlgolParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 46; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffefffffffffe001L, 0x19ffffffL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[46];
    static private final int[] jjstateSet = new int[2 * 46];

    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    
    static protected char curChar;
}
